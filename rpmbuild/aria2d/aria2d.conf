# Set log level to output.  LEVEL is either debug, info, notice,
# warn or error.  Default: debug
log-level=error

# The  file name of the log file. If - is specified, log is
# written to stdout. If empty string("") is specified, or
# this option is omitted, no log is written to disk at all.
log=-

# Disable IPv6. This is useful if you have to use broken
# DNS and want to avoid terribly slow AAAA record lookup.
# Default: false
disable-ipv6=true

# Enable JSON-RPC/XML-RPC  server. It  is  strongly  recommended
# to set secret  authorization  token  using --rpc-secret option.
# See also --rpc-listen-port option.  Default: false
enable-rpc=true

# Listen incoming JSON-RPC/XML-RPC requests on all network
# interfaces. If false is given, listen only  on  local
# loopback interface.  Default: false
#rpc-listen-all=true

# Specify a port number for JSON-RPC/XML-RPC server to listen
# to. Possible Values: 1024 -65535 Default: 6800
#rpc-listen-port=6800

# Set  max size of JSON-RPC/XML-RPC request. If aria2 detects
# the request is more than SIZE bytes, it drops connection.
# Default: 2M
#rpc-max-request-size=<SIZE>

# Set RPC secret authorization token. Read RPC authorization
# secret token to know how this option value is used.
# try create by "openssl rand -hex 15"
rpc-secret=mytoken

# Add Access-Control-Allow-Origin header field with value * to the
# RPC response.  Default: false
#rpc-allow-origin-all=false

# RPC transport will be encrypted by SSL/TLS.  The RPC clients must
# use https scheme to access the server. For WebSocket client, use wss
# scheme. Use --rpc-certificate and --rpc-private-key options to specify
# the server certificate and private key.
rpc-secure=false

# Use the certificate in FILE for RPC server. The certificate must
# be either in PKCS12 (.p12, .pfx)  or  in  PEM format.
#rpc-certificate=<FILE>

# Use  the  private  key  in  FILE  for  RPC  server. The private
# key must be decrypted and in PEM format. Use --rpc-secure option
# to enable encryption. See also --rpc-certificate option.
#rpc-private-key=<FILE>

# Save the uploaded torrent or metalink meta data in the directory
# specified by --dir option. The file name consists of SHA-1 hash
# hex string of meta data plus extension. For torrent, the extension
# is '.torrent'. For metalink, it is '.meta4'.  If false is given to
# this  option,  the  downloads  added  by  aria2.addTorrent() or
# aria2.addMetalink() will not be saved by --save-session option.
# Default: true
#save-upload-metadata=true

# Pause download after added. This option is effective only when
# --enable-rpc=true is given.  Default: false
#pause=false

# Pause  downloads  created  as a result of metadata download.
# There are 3 types of metadata downloads in aria2: (1) downloading
# .torrent file. (2) downloading torrent metadata using magnet link.
# (3)  downloading  metalink file. These metadata downloads will
# generate downloads using their metadata. This option pauses
# these subsequent downloads. This option is effective only when
# --enable-rpc=true is given.  Default: false
#pause-metadata=false


# Enable disk cache. If SIZE is 0, the disk cache is disabled. This feature caches
# the downloaded data  in  memory,  which  grows  to  at  most SIZE bytes. The cache
# storage is created for aria2 instance and shared by all downloads. The one advantage
# of the disk cache is reduce the disk I/O because the data are written  in  larger
# unit  and  it is reordered by the offset of the file.  If hash checking is involved
# and the data are cached in memory, we don't need to read them from the disk.
# SIZE can include K or M (1K = 1024, 1M =  1024K).  Default:16M
disk-cache=64M

# Specify  file  allocation  method. none  doesn't  pre-allocate file space.
# prealloc pre-allocates file space before download begins. This may take
# some time depending on the size of the file.  If  you  are  using  newer
# file systems such as ext4 (with extents support), btrfs, xfs or NTFS(MinGW
# build only), falloc is your best choice. It allocates large(few GiB) files
# almost instantly. Don't use falloc with legacy file systems such as ext3
# and FAT32 because it takes almost same time as prealloc and it blocks
# aria2 entirely until allocation finishes. falloc may not be available if
# your system doesn't have  posix_fallocate(3) function. trunc uses ftruncate(2)
# system call or platform-specific counterpart to truncate a file to a specified
# length. Possible Values: none, prealloc, trunc, falloc Default: prealloc
file-allocation=falloc

# Set interval in seconds to output download progress summary.
# Setting 0 suppresses the output.  Default: 60
#summary-interval=<SEC>

# Set  the  connect timeout in seconds to establish connection
# to HTTP/FTP/proxy server. After the connection is established,
# this option makes no effect and --timeout option is used instead.
# Default: 60
#connect-timeout=<SEC>

# Set timeout in seconds.  Default: 60
#timeout=<SEC>

# Set the seconds to wait between retries. When SEC > 0, aria2
# will retry downloads when the HTTP server returns a 503
# response. Default: 0
retry-wait=30

# Set number of tries. 0 means unlimited.  See also --retry-wait.
# Default: 5
#max-tries=<N>

# Set the maximum number of parallel downloads for every queue
# item.  See also the --split option.  Default: 5
max-concurrent-downloads=10

# The maximum number of connections to one server for each
# download.  Default: 1
max-connection-per-server=5

# Set max overall upload speed in bytes/sec. 0 means unrestricted.
# You can append K or M  (1K  =  1024,  1M  = 1024K).  To limit
# the upload speed per torrent, use --max-upload-limit option.
# Default: 0
max-overall-upload-limit=4M

# Set max upload speed per each torrent in bytes/sec. 0 means
# unrestricted.  You can append K or M (1K = 1024, 1M = 1024K).
# To limit the overall upload speed, use --max-overall-upload-limit
# option.  Default: 0
max-upload-limit=1M

# The directory to store the downloaded file.
dir=<DIR>

# Save  error/unfinished  downloads  to FILE on exit.  You can pass
# this output file to aria2c with --input-file option on restart.
# If you like the output to be gzipped append a .gz extension to the
# file name.  Please  note that downloads added by aria2.addTorrent()
# and aria2.addMetalink() RPC method and whose meta data could not be
# saved as a file are not saved.  Downloads removed using aria2.remove()
# and  aria2.forceRemove() will not be saved. GID is also saved with
# gid, but there are some restrictions
save-session=/var/lib/aria2d/session.gz

# Downloads the URIs listed in FILE. You can specify multiple sources
# for a single entity by  putting  multiple URIs on a single line
# separated by the TAB character.  Additionally, options can be specified
# after each URI line. Option lines must start with one or more white space
# characters (SPACE or TAB) and must only contain one option per line. Input
# files can use gzip compression.  When FILE is specified as -, aria2 will
# read the input from stdin. See the Input File subsection for details.  See
# also the --deferred-input option.  See also the --save-session option.
#input-file=/var/lib/aria2d/session.gz

# Specify the external IP address to use in BitTorrent download and DHT.
# It may be sent to BitTorrent tracker.For DHT, this option should be set
# to report that local node is downloading a  particular  torrent. This is
# critical to use DHT in a private network. Although this function is named
# external, it can accept any kind of IP addresses.
#bt-external-ip=<IPADDRESS>

# Comma separated list of additional BitTorrent tracker's announce URI.
# These URIs are not affected by --bt-exclude-tracker option because they
# are added after URIs in --bt-exclude-tracker option are removed.
#bt-tracker=

# Change the IPv4 DHT routing table file to PATH. Default:$HOME/.aria2/dht.dat
# if present, otherwise $XDG_CACHE_HOME/aria2/dht.dat.
dht-file-path=/var/lib/aria2d/dht4.dat

# Change the IPv6 DHT routing table file to PATH. Default:$HOME/.aria2/dht6.dat
# if  present, otherwise $XDG_CACHE_HOME/aria2/dht6.dat.
dht-file-path6=/var/lib/aria2d/dht6.dat